# 'dataset' holds the input data for this script
import pandas as pd
#Cargar Datos
#Cargar Datos
items_df = pd.read_excel('C:\\ASCM\\Optimizar.xlsx', sheet_name='items')
utilidad_df = pd.read_excel('C:\\ASCM\\Optimizar.xlsx', sheet_name='utilidades')
restricciones_df = pd.read_excel('C:\\ASCM\\Optimizar.xlsx', sheet_name='recursos')

###################################
#OPTIMIZADOR 
import pulp
# ... Código de creación de dataframes ...

# Crear un problema de maximización
prob = pulp.LpProblem("ATU_Optimization", pulp.LpMaximize)

# Crear un diccionario para almacenar las variables de decisión
variables = {row['Producto']: pulp.LpVariable(row['Producto'], lowBound=0, cat='Integer') for _, row in items_df.iterrows()}

# Definir la función objetivo (maximizar las ganancias)
prob += pulp.lpSum([utilidad_df.loc[utilidad_df['Producto'] == product, 'Beneficio'].values[0] * variables[product] for product in variables]), "Ganancias"

# Definir las restricciones de cantidad mínima y máxima
for _, row in items_df.iterrows():
    product = row['Producto']
    prob += pulp.lpSum([row[col] * variables[product] for col in ['Horas_Mano_Obra', 'Tableros_Primer_Tipo', 'Tableros_Segundo_Tipo']]) >= (row['Cantidad_Minima'] if pd.notna(row['Cantidad_Minima']) else 0), f"{product}_Cantidad_Minima"
    prob += pulp.lpSum([row[col] * variables[product] for col in ['Horas_Mano_Obra', 'Tableros_Primer_Tipo', 'Tableros_Segundo_Tipo']]) <= (row['Cantidad_Maxima'] if pd.notna(row['Cantidad_Maxima']) else 1e6), f"{product}_Cantidad_Maxima"

# Definir las restricciones adicionales desde el dataframe 'restricciones_df'
for _, row in restricciones_df.iterrows():
    restriction_name = row['Restricción']
    restriction_value = row['Valor']
    prob += pulp.lpSum([variables[product] * items_df.loc[items_df['Producto'] == product, restriction_name].values[0] for product in variables]) <= restriction_value, f"{restriction_name}_Restricción"

# Resolver el problema
prob.solve()

# Crear un DataFrame para almacenar los resultados
data = {'Producto': list(variables.keys()), 
        'Cantidad': [variables[product].varValue for product in variables]}

df_resultados = pd.DataFrame(data)
